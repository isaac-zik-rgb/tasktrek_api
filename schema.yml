openapi: 3.0.3
info:
  title: TASKTREK API
  version: 0.0.0
paths:
  /api/account/categories/:
    get:
      operationId: api_account_categories_list
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
    post:
      operationId: api_account_categories_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/account/categories/{id}/:
    get:
      operationId: api_account_categories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: api_account_categories_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: api_account_categories_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: api_account_categories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this category.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/account/comments/:
    get:
      operationId: api_account_comments_list
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: api_account_comments_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
  /api/account/comments/{id}/:
    get:
      operationId: api_account_comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: api_account_comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    patch:
      operationId: api_account_comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComment'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    delete:
      operationId: api_account_comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/account/posts/:
    get:
      operationId: api_account_posts_list
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: api_account_posts_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
  /api/account/posts/{id}/:
    get:
      operationId: api_account_posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: api_account_posts_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    patch:
      operationId: api_account_posts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPost'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    delete:
      operationId: api_account_posts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/account/profiles/{id}/:
    get:
      operationId: api_account_profiles_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    put:
      operationId: api_account_profiles_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfile'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
    patch:
      operationId: api_account_profiles_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserProfile'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: ''
  /api/account/users/:
    get:
      operationId: api_account_users_list
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRegistration'
          description: ''
    post:
      operationId: api_account_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
  /api/account/users/{id}/:
    get:
      operationId: api_account_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
    put:
      operationId: api_account_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
    patch:
      operationId: api_account_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRegistration'
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegistration'
          description: ''
    delete:
      operationId: api_account_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '204':
          description: No response body
  /api/accounts/email/change/:
    post:
      operationId: api_accounts_email_change_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailChange'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailChange'
          description: ''
  /api/accounts/email/change{format}:
    post:
      operationId: api_accounts_email_change_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EmailChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EmailChange'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailChange'
          description: ''
  /api/accounts/email/change/verify/:
    get:
      operationId: api_accounts_email_change_verify_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/email/change/verify{format}:
    get:
      operationId: api_accounts_email_change_verify_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/login/:
    post:
      operationId: api_accounts_login_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/accounts/login{format}:
    post:
      operationId: api_accounts_login_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/accounts/logout/:
    get:
      operationId: api_accounts_logout_retrieve
      description: Remove all auth tokens owned by request.user.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/accounts/logout{format}:
    get:
      operationId: api_accounts_logout_formatted_retrieve
      description: Remove all auth tokens owned by request.user.
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/accounts/password/change/:
    post:
      operationId: api_accounts_password_change_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
  /api/accounts/password/change{format}:
    post:
      operationId: api_accounts_password_change_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
  /api/accounts/password/reset/:
    post:
      operationId: api_accounts_password_reset_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
  /api/accounts/password/reset{format}:
    post:
      operationId: api_accounts_password_reset_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
  /api/accounts/password/reset/verified/:
    post:
      operationId: api_accounts_password_reset_verified_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetVerified'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetVerified'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetVerified'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetVerified'
          description: ''
  /api/accounts/password/reset/verified{format}:
    post:
      operationId: api_accounts_password_reset_verified_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetVerified'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetVerified'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetVerified'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetVerified'
          description: ''
  /api/accounts/password/reset/verify/:
    get:
      operationId: api_accounts_password_reset_verify_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/password/reset/verify{format}:
    get:
      operationId: api_accounts_password_reset_verify_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/signup/:
    post:
      operationId: api_accounts_signup_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Signup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
          description: ''
  /api/accounts/signup{format}:
    post:
      operationId: api_accounts_signup_formatted_create
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Signup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'
          description: ''
  /api/accounts/signup/verify/:
    get:
      operationId: api_accounts_signup_verify_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/signup/verify{format}:
    get:
      operationId: api_accounts_signup_verify_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/accounts/users/me/:
    get:
      operationId: api_accounts_users_me_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/accounts/users/me{format}:
    get:
      operationId: api_accounts_users_me_formatted_retrieve
      parameters:
      - in: path
        name: format
        schema:
          type: string
          enum:
          - .json
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/auth/convert-token/:
    post:
      operationId: api_auth_convert_token_create
      description: |-
        Implements an endpoint to convert a provider token to an access token

        The endpoint is used in the following flows:

        * Authorization code
        * Client credentials
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/auth/disconnect-backend/:
    post:
      operationId: api_auth_disconnect_backend_create
      description: An endpoint for disconnect social auth backend providers such as
        Facebook.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/invalidate-refresh-tokens/:
    post:
      operationId: api_auth_invalidate_refresh_tokens_create
      description: Invalidate all refresh tokens associated with a client id.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/invalidate-sessions/:
    post:
      operationId: api_auth_invalidate_sessions_create
      description: Delete all access tokens associated with a client id.
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/revoke-token/:
    post:
      operationId: api_auth_revoke_token_create
      description: Implements an endpoint to revoke access or refresh tokens
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      responses:
        '200':
          description: No response body
  /api/auth/token/:
    post:
      operationId: api_auth_token_create
      description: |-
        Implements an endpoint to provide access tokens

        The endpoint is used in the following flows:

        * Authorization code
        * Password
        * Client credentials
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - tokenAuth: []
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        owner:
          type: string
          readOnly: true
        posts:
          type: array
          items:
            type: integer
          readOnly: true
      required:
      - id
      - owner
      - posts
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
        owner:
          type: string
          readOnly: true
        post:
          type: integer
        created:
          type: string
          readOnly: true
      required:
      - created
      - id
      - owner
      - post
    EmailChange:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
      required:
      - email
    GenderEnum:
      enum:
      - M
      - F
      - O
      type: string
      description: |-
        * `M` - Male
        * `F` - Female
        * `O` - Other
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          maxLength: 128
      required:
      - email
      - password
    PasswordChange:
      type: object
      properties:
        password:
          type: string
          maxLength: 128
      required:
      - password
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
      required:
      - email
    PasswordResetVerified:
      type: object
      properties:
        code:
          type: string
          maxLength: 40
        password:
          type: string
          maxLength: 128
      required:
      - code
      - password
    PatchedCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        owner:
          type: string
          readOnly: true
        posts:
          type: array
          items:
            type: integer
          readOnly: true
    PatchedComment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
        owner:
          type: string
          readOnly: true
        post:
          type: integer
        created:
          type: string
          readOnly: true
    PatchedPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        body:
          type: string
        owner:
          type: string
          readOnly: true
        created:
          type: string
          readOnly: true
        comments:
          type: array
          items:
            type: integer
          readOnly: true
        categories:
          type: array
          items:
            type: integer
    PatchedUserProfile:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: integer
          readOnly: true
        user:
          type: string
          format: uri
          readOnly: true
        image:
          type: string
          format: uri
          nullable: true
        resume:
          type: string
          format: uri
          nullable: true
        phone:
          type: string
          maxLength: 15
        country:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 100
        bio:
          type: string
    PatchedUserRegistration:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 255
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        password:
          type: string
          writeOnly: true
        old_password:
          type: string
          writeOnly: true
        country:
          type: string
        gender:
          $ref: '#/components/schemas/GenderEnum'
        phone:
          type: string
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        posts:
          type: array
          items:
            type: integer
          readOnly: true
        post_count:
          type: string
          readOnly: true
        comments:
          type: array
          items:
            type: integer
          readOnly: true
        comment_count:
          type: string
          readOnly: true
        categories:
          type: array
          items:
            type: integer
          readOnly: true
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 100
        body:
          type: string
        owner:
          type: string
          readOnly: true
        created:
          type: string
          readOnly: true
        comments:
          type: array
          items:
            type: integer
          readOnly: true
        categories:
          type: array
          items:
            type: integer
      required:
      - categories
      - comments
      - created
      - id
      - owner
    Signup:
      type: object
      description: |-
        Don't require email to be unique so visitor can signup multiple times,
        if misplace verification email.  Handle in view.
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          maxLength: 128
        first_name:
          type: string
          default: ''
          maxLength: 30
        last_name:
          type: string
          default: ''
          maxLength: 30
      required:
      - email
      - password
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 255
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
      required:
      - email
      - id
    UserProfile:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: integer
          readOnly: true
        user:
          type: string
          format: uri
          readOnly: true
        image:
          type: string
          format: uri
          nullable: true
        resume:
          type: string
          format: uri
          nullable: true
        phone:
          type: string
          maxLength: 15
        country:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 100
        bio:
          type: string
      required:
      - id
      - url
      - user
    UserRegistration:
      type: object
      properties:
        url:
          type: string
          format: uri
          readOnly: true
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          maxLength: 255
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        password:
          type: string
          writeOnly: true
        old_password:
          type: string
          writeOnly: true
        country:
          type: string
        gender:
          $ref: '#/components/schemas/GenderEnum'
        phone:
          type: string
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        posts:
          type: array
          items:
            type: integer
          readOnly: true
        post_count:
          type: string
          readOnly: true
        comments:
          type: array
          items:
            type: integer
          readOnly: true
        comment_count:
          type: string
          readOnly: true
        categories:
          type: array
          items:
            type: integer
          readOnly: true
      required:
      - categories
      - comment_count
      - comments
      - email
      - id
      - post_count
      - posts
      - profile
      - url
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    oauth2:
      type: oauth2
      flows: {}
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
